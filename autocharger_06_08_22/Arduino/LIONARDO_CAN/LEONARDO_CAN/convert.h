byte dectohex(byte input){
  switch(input){
case 0 : return 0x00; break; 
case 1 : return 0x01; break; 
case 2 : return 0x02; break; 
case 3 : return 0x03; break; 
case 4 : return 0x04; break; 
case 5 : return 0x05; break; 
case 6 : return 0x06; break; 
case 7 : return 0x07; break; 
case 8 : return 0x08; break; 
case 9 : return 0x09; break; 
case 10 : return 0x0a; break; 
case 11 : return 0x0b; break; 
case 12 : return 0x0c; break; 
case 13 : return 0x0d; break; 
case 14 : return 0x0e; break; 
case 15 : return 0x0f; break; 
case 16 : return 0x10; break; 
case 17 : return 0x11; break; 
case 18 : return 0x12; break; 
case 19 : return 0x13; break; 
case 20 : return 0x14; break; 
case 21 : return 0x15; break; 
case 22 : return 0x16; break; 
case 23 : return 0x17; break; 
case 24 : return 0x18; break; 
case 25 : return 0x19; break; 
case 26 : return 0x1a; break;
case 27 : return 0x1b; break;
case 28 : return 0x1c; break;
case 29 : return 0x1d; break;
case 30 : return 0x1e; break;
case 31 : return 0x1f; break;
case 32 : return 0x20; break;
case 33 : return 0x21; break;
case 34 : return 0x22; break;
case 35 : return 0x23; break;
case 36 : return 0x24; break;
case 37 : return 0x25; break;
case 38 : return 0x26; break;
case 39 : return 0x27; break;
case 40 : return 0x28; break;
case 41 : return 0x29; break;
case 42 : return 0x2a; break;
case 43 : return 0x2b; break;
case 44 : return 0x2c; break;
case 45 : return 0x2d; break;
case 46 : return 0x2e; break;
case 47 : return 0x2f; break;
case 48 : return 0x30; break;
case 49 : return 0x31; break;
case 50 : return 0x32; break;
case 51 : return 0x33; break;
case 52 : return 0x34; break;
case 53 : return 0x35; break;
case 54 : return 0x36; break;
case 55 : return 0x37; break;
case 56 : return 0x38; break;
case 57 : return 0x39; break;
case 58 : return 0x3a; break;
case 59 : return 0x3b; break;
case 60 : return 0x3c; break;
case 61 : return 0x3d; break;
case 62 : return 0x3e; break;
case 63 : return 0x3f; break;
case 64 : return 0x40; break;
case 65 : return 0x41; break;
case 66 : return 0x42; break;
case 67 : return 0x43; break;
case 68 : return 0x44; break;
case 69 : return 0x45; break;
case 70 : return 0x46; break;
case 71 : return 0x47; break;
case 72 : return 0x48; break;
case 73 : return 0x49; break;
case 74 : return 0x4a; break;
case 75 : return 0x4b; break;
case 76 : return 0x4c; break;
case 77 : return 0x4d; break;
case 78 : return 0x4e; break;
case 79 : return 0x4f; break; 
case 80 : return 0x50; break;
case 81 : return 0x51; break;
case 82 : return 0x52; break;
case 83 : return 0x53; break;
case 84 : return 0x54; break;
case 85 : return 0x55; break;
case 86 : return 0x56; break;
case 87 : return 0x57; break;
case 88 : return 0x58; break;
case 89 : return 0x59; break;
case 90 : return 0x5a; break;
case 91 : return 0x5b; break;
case 92 : return 0x5c; break;
case 93 : return 0x5d; break;
case 94 : return 0x5e; break;
case 95 : return 0x5f; break;
case 96 : return 0x60; break;
case 97 : return 0x61; break;
case 98 : return 0x62; break;
case 99 : return 0x63; break;
case 100 : return 0x64; break;
case 101 : return 0x65; break;
case 102 : return 0x66; break;
case 103 : return 0x67; break;
case 104 : return 0x68; break;
case 105 : return 0x69; break;
case 106 : return 0x6a; break;
case 107 : return 0x6b; break;
case 108 : return 0x6c; break;
case 109 : return 0x6d; break;
case 110 : return 0x6e; break;
case 111 : return 0x6f; break;
case 112 : return 0x70; break;
case 113 : return 0x71; break;
case 114 : return 0x72; break;
case 115 : return 0x73; break;
case 116 : return 0x74; break;
case 117 : return 0x75; break;
case 118 : return 0x76; break;
case 119 : return 0x77; break;
case 120 : return 0x78; break;
case 121 : return 0x79; break;
case 122 : return 0x7a; break;
case 123 : return 0x7b; break;
case 124 : return 0x7c; break;
case 125 : return 0x7d; break;
case 126 : return 0x7e; break;
case 127 : return 0x7f; break;
case 128 : return 0x80; break;
case 129 : return 0x81; break;
case 130 : return 0x82; break;
case 131 : return 0x83; break;
case 132 : return 0x84; break;
case 133 : return 0x85; break;
case 134 : return 0x86; break;
case 135 : return 0x87; break;
case 136 : return 0x88; break;
case 137 : return 0x89; break;
case 138 : return 0x8a; break;
case 139 : return 0x8b; break;
case 140 : return 0x8c; break;
case 141 : return 0x8d; break;
case 142 : return 0x8e; break;
case 143 : return 0x8f; break;
case 144 : return 0x90; break;
case 145 : return 0x91; break;
case 146 : return 0x92; break;
case 147 : return 0x93; break;
case 148 : return 0x94; break;
case 149 : return 0x95; break;
case 150 : return 0x96; break;
case 151 : return 0x97; break;
case 152 : return 0x98; break;
case 153 : return 0x99; break;
case 154 : return 0x9a; break;
case 155 : return 0x9b; break;
case 156 : return 0x9c; break;
case 157 : return 0x9d; break;
case 158 : return 0x9e; break;
case 159 : return 0x9f; break;
case 160 : return 0xa0; break;
case 161 : return 0xa1; break; 
case 162 : return 0xa2; break;
case 163 : return 0xa3; break;
case 164 : return 0xa4; break;
case 165 : return 0xa5; break;
case 166 : return 0xa6; break;
case 167 : return 0xa7; break;
case 168 : return 0xa8; break;
case 169 : return 0xa9; break;
case 170 : return 0xaa; break;
case 171 : return 0xab; break;
case 172 : return 0xac; break;
case 173 : return 0xad; break;
case 174 : return 0xae; break;
case 175 : return 0xaf; break;
case 176 : return 0xb0; break;
case 177 : return 0xb1; break;
case 178 : return 0xb2; break;
case 179 : return 0xb3; break;
case 180 : return 0xb4; break;
case 181 : return 0xb5; break;
case 182 : return 0xb6; break;
case 183 : return 0xb7; break;
case 184 : return 0xb8; break;
case 185 : return 0xb9; break;
case 186 : return 0xba; break;
case 187 : return 0xbb; break;
case 188 : return 0xbc; break;
case 189 : return 0xbd; break;
case 190 : return 0xbe; break;
case 191 : return 0xbf; break;
case 192 : return 0xc0; break;
case 193 : return 0xc1; break;
case 194 : return 0xc2; break;
case 195 : return 0xc3; break;
case 196 : return 0xc4; break;
case 197 : return 0xc5; break;
case 198 : return 0xc6; break;
case 199 : return 0xc7; break;
case 200 : return 0xc8; break;
case 201 : return 0xc9; break;
case 202 : return 0xca; break;
case 203 : return 0xcb; break;
case 204 : return 0xcc; break;
case 205 : return 0xcd; break;
case 206 : return 0xce; break;
case 207 : return 0xcf; break;
case 208 : return 0xd0; break;
case 209 : return 0xd1; break;
case 210 : return 0xd2; break;
case 211 : return 0xd3; break;
case 212 : return 0xd4; break;
case 213 : return 0xd5; break;
case 214 : return 0xd6; break;
case 215 : return 0xd7; break;
case 216 : return 0xd8; break;
case 217 : return 0xd9; break;
case 218 : return 0xda; break;
case 219 : return 0xdb; break;
case 220 : return 0xdc; break;
case 221 : return 0xdd; break;
case 222 : return 0xde; break;
case 223 : return 0xdf; break;
case 224 : return 0xe0; break;
case 225 : return 0xe1; break;
case 226 : return 0xe2; break;
case 227 : return 0xe3; break;
case 228 : return 0xe4; break;
case 229 : return 0xe5; break;
case 230 : return 0xe6; break;
case 231 : return 0xe7; break;
case 232 : return 0xe8; break;
case 233 : return 0xe9; break;
case 234 : return 0xea; break;
case 235 : return 0xeb; break;
case 236 : return 0xec; break;
case 237 : return 0xed; break;
case 238 : return 0xee; break;
case 239 : return 0xef; break;
case 240 : return 0xf0; break;
case 241 : return 0xf1; break;
case 242 : return 0xf2; break;
case 243 : return 0xf3; break;
case 244 : return 0xf4; break;
case 245 : return 0xf5; break;
case 246 : return 0xf6; break;
case 247 : return 0xf7; break;
case 248 : return 0xf8; break;
case 249 : return 0xf9; break; 
case 250 : return 0xfa; break;
case 251 : return 0xfb; break;
case 252 : return 0xfc; break;
case 253 : return 0xfd; break;
case 254 : return 0xfe; break;
case 255 : return 0xff; break;
  }
}

byte dectohexAmp(byte input){
  switch(input){
case 0 : return 0x00; break; 
case 1 : return 0x01; break; 
case 2 : return 0x02; break; 
case 3 : return 0x03; break; 
case 4 : return 0x04; break; 
case 5 : return 0x05; break; 
case 6 : return 0x06; break; 
case 7 : return 0x07; break; 
case 8 : return 0x08; break; 
case 9 : return 0x09; break; 
case 10 : return 0x0a; break; 
case 11 : return 0x0b; break; 
case 12 : return 0x0c; break; 
case 13 : return 0x0d; break; 
case 14 : return 0x0e; break; 
case 15 : return 0x0f; break; 
case 16 : return 0x10; break; 
case 17 : return 0x11; break; 
case 18 : return 0x12; break; 
case 19 : return 0x13; break; 
case 20 : return 0x14; break; 
case 21 : return 0x15; break; 
case 22 : return 0x16; break; 
case 23 : return 0x17; break; 
case 24 : return 0x18; break; 
case 25 : return 0x19; break; 
case 26 : return 0x1a; break;
case 27 : return 0x1b; break;
case 28 : return 0x1c; break;
case 29 : return 0x1d; break;
case 30 : return 0x1e; break;
case 31 : return 0x1f; break;
case 32 : return 0x20; break;
case 33 : return 0x21; break;
case 34 : return 0x22; break;
case 35 : return 0x23; break;
case 36 : return 0x24; break;
case 37 : return 0x25; break;
case 38 : return 0x26; break;
case 39 : return 0x27; break;
case 40 : return 0x28; break;
case 41 : return 0x29; break;
case 42 : return 0x2a; break;
case 43 : return 0x2b; break;
case 44 : return 0x2c; break;
case 45 : return 0x2d; break;
case 46 : return 0x2e; break;
case 47 : return 0x2f; break;
case 48 : return 0x30; break;
case 49 : return 0x31; break;
case 50 : return 0x32; break;
case 51 : return 0x33; break;
case 52 : return 0x34; break;
case 53 : return 0x35; break;
case 54 : return 0x36; break;
case 55 : return 0x37; break;
case 56 : return 0x38; break;
case 57 : return 0x39; break;
case 58 : return 0x3a; break;
case 59 : return 0x3b; break;
case 60 : return 0x3c; break;
case 61 : return 0x3d; break;
case 62 : return 0x3e; break;
case 63 : return 0x3f; break;
case 64 : return 0x40; break;
case 65 : return 0x41; break;
case 66 : return 0x42; break;
case 67 : return 0x43; break;
case 68 : return 0x44; break;
case 69 : return 0x45; break;
case 70 : return 0x46; break;
case 71 : return 0x47; break;
case 72 : return 0x48; break;
case 73 : return 0x49; break;
case 74 : return 0x4a; break;
case 75 : return 0x4b; break;
case 76 : return 0x4c; break;
case 77 : return 0x4d; break;
case 78 : return 0x4e; break;
case 79 : return 0x4f; break; 
case 80 : return 0x50; break;
case 81 : return 0x51; break;
case 82 : return 0x52; break;
case 83 : return 0x53; break;
case 84 : return 0x54; break;
case 85 : return 0x55; break;
case 86 : return 0x56; break;
case 87 : return 0x57; break;
case 88 : return 0x58; break;
case 89 : return 0x59; break;
case 90 : return 0x5a; break;
case 91 : return 0x5b; break;
case 92 : return 0x5c; break;
case 93 : return 0x5d; break;
case 94 : return 0x5e; break;
case 95 : return 0x5f; break;
case 96 : return 0x60; break;
case 97 : return 0x61; break;
case 98 : return 0x62; break;
case 99 : return 0x63; break;
case 100 : return 0x64; break;
case 101 : return 0x65; break;
case 102 : return 0x66; break;
case 103 : return 0x67; break;
case 104 : return 0x68; break;
case 105 : return 0x69; break;
case 106 : return 0x6a; break;
case 107 : return 0x6b; break;
case 108 : return 0x6c; break;
case 109 : return 0x6d; break;
case 110 : return 0x6e; break;
case 111 : return 0x6f; break;
case 112 : return 0x70; break;
case 113 : return 0x71; break;
case 114 : return 0x72; break;
case 115 : return 0x73; break;
case 116 : return 0x74; break;
case 117 : return 0x75; break;
case 118 : return 0x76; break;
case 119 : return 0x77; break;
case 120 : return 0x78; break;
case 121 : return 0x79; break;
case 122 : return 0x7a; break;
case 123 : return 0x7b; break;
case 124 : return 0x7c; break;
case 125 : return 0x7d; break;
case 126 : return 0x7e; break;
case 127 : return 0x7f; break;
case 128 : return 0x80; break;
case 129 : return 0x81; break;
case 130 : return 0x82; break;
case 131 : return 0x83; break;
case 132 : return 0x84; break;
case 133 : return 0x85; break;
case 134 : return 0x86; break;
case 135 : return 0x87; break;
case 136 : return 0x88; break;
case 137 : return 0x89; break;
case 138 : return 0x8a; break;
case 139 : return 0x8b; break;
case 140 : return 0x8c; break;
case 141 : return 0x8d; break;
case 142 : return 0x8e; break;
case 143 : return 0x8f; break;
case 144 : return 0x90; break;
case 145 : return 0x91; break;
case 146 : return 0x92; break;
case 147 : return 0x93; break;
case 148 : return 0x94; break;
case 149 : return 0x95; break;
case 150 : return 0x96; break;
case 151 : return 0x97; break;
case 152 : return 0x98; break;
case 153 : return 0x99; break;
case 154 : return 0x9a; break;
case 155 : return 0x9b; break;
case 156 : return 0x9c; break;
case 157 : return 0x9d; break;
case 158 : return 0x9e; break;
case 159 : return 0x9f; break;
case 160 : return 0xa0; break;
case 161 : return 0xa1; break; 
case 162 : return 0xa2; break;
case 163 : return 0xa3; break;
case 164 : return 0xa4; break;
case 165 : return 0xa5; break;
case 166 : return 0xa6; break;
case 167 : return 0xa7; break;
case 168 : return 0xa8; break;
case 169 : return 0xa9; break;
case 170 : return 0xaa; break;
case 171 : return 0xab; break;
case 172 : return 0xac; break;
case 173 : return 0xad; break;
case 174 : return 0xae; break;
case 175 : return 0xaf; break;
case 176 : return 0xb0; break;
case 177 : return 0xb1; break;
case 178 : return 0xb2; break;
case 179 : return 0xb3; break;
case 180 : return 0xb4; break;
case 181 : return 0xb5; break;
case 182 : return 0xb6; break;
case 183 : return 0xb7; break;
case 184 : return 0xb8; break;
case 185 : return 0xb9; break;
case 186 : return 0xba; break;
case 187 : return 0xbb; break;
case 188 : return 0xbc; break;
case 189 : return 0xbd; break;
case 190 : return 0xbe; break;
case 191 : return 0xbf; break;
case 192 : return 0xc0; break;
case 193 : return 0xc1; break;
case 194 : return 0xc2; break;
case 195 : return 0xc3; break;
case 196 : return 0xc4; break;
case 197 : return 0xc5; break;
case 198 : return 0xc6; break;
case 199 : return 0xc7; break;
case 200 : return 0xc8; break;
case 201 : return 0xc9; break;
case 202 : return 0xca; break;
case 203 : return 0xcb; break;
case 204 : return 0xcc; break;
case 205 : return 0xcd; break;
case 206 : return 0xce; break;
case 207 : return 0xcf; break;
case 208 : return 0xd0; break;
case 209 : return 0xd1; break;
case 210 : return 0xd2; break;
case 211 : return 0xd3; break;
case 212 : return 0xd4; break;
case 213 : return 0xd5; break;
case 214 : return 0xd6; break;
case 215 : return 0xd7; break;
case 216 : return 0xd8; break;
case 217 : return 0xd9; break;
case 218 : return 0xda; break;
case 219 : return 0xdb; break;
case 220 : return 0xdc; break;
case 221 : return 0xdd; break;
case 222 : return 0xde; break;
case 223 : return 0xdf; break;
case 224 : return 0xe0; break;
case 225 : return 0xe1; break;
case 226 : return 0xe2; break;
case 227 : return 0xe3; break;
case 228 : return 0xe4; break;
case 229 : return 0xe5; break;
case 230 : return 0xe6; break;
case 231 : return 0xe7; break;
case 232 : return 0xe8; break;
case 233 : return 0xe9; break;
case 234 : return 0xea; break;
case 235 : return 0xeb; break;
case 236 : return 0xec; break;
case 237 : return 0xed; break;
case 238 : return 0xee; break;
case 239 : return 0xef; break;
case 240 : return 0xf0; break;
case 241 : return 0xf1; break;
case 242 : return 0xf2; break;
case 243 : return 0xf3; break;
case 244 : return 0xf4; break;
case 245 : return 0xf5; break;
case 246 : return 0xf6; break;
case 247 : return 0xf7; break;
case 248 : return 0xf8; break;
case 249 : return 0xf9; break; 
case 250 : return 0xfa; break;
case 251 : return 0xfb; break;
case 252 : return 0xfc; break;
case 253 : return 0xfd; break;
case 254 : return 0xfe; break;
case 255 : return 0xff; break;
default :return 0x00;
  }
}
unsigned int hexToDec(String hexString) {
  
  unsigned int decValue = 0;
  int nextInt;
  
  for (int i = 0; i < hexString.length(); i++) {
    
    nextInt = int(hexString.charAt(i));
    if (nextInt >= 48 && nextInt <= 57) nextInt = map(nextInt, 48, 57, 0, 9);
    if (nextInt >= 65 && nextInt <= 70) nextInt = map(nextInt, 65, 70, 10, 15);
    if (nextInt >= 97 && nextInt <= 102) nextInt = map(nextInt, 97, 102, 10, 15);
    nextInt = constrain(nextInt, 0, 15);
    
    decValue = (decValue * 16) + nextInt;
  }
  
  return decValue;
}

String decToHex(byte decValue, byte desiredStringLength) {
  
  String hexString = String(decValue, HEX);
  while (hexString.length() < desiredStringLength) hexString = "0" + hexString;
  
  return hexString;
}
